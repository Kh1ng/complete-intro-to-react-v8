{"pageProps":{"post":{"attributes":{"title":"ErrorBoundary","path":"/ts-error-boundary","order":"13E","section":"TypeScript","description":"Brian quickly converts ErrorBoundary.tsx"},"html":"<p>Let&#39;s go do ErrorBoundary.tsx now</p>\n<pre><code class=\"language-tsx\">// import at top\nimport { Component, ErrorInfo, ReactElement } from &quot;react&quot;;\n\n// add return type of children\nclass ErrorBoundary extends Component&lt;{children: ReactElement}&gt; { â€¦ }\n\n// add types to parameters\ncomponentDidCatch(error: Error, info: ErrorInfo) {}\n</code></pre>\n<ul>\n<li>We didn&#39;t have to change from a constructor to a public class property but it makes typing so much easier because TS knows how to handle it implicitly if you use public class properties.</li>\n<li>We had to type the parameters and return types. We have TS in strict mode and a pretty strict set of linting rules which means it doesn&#39;t like anything to be an <code>any</code> type.</li>\n</ul>\n","slug":"refactor-error-boundary","title":"ErrorBoundary","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/E-refactor-error-boundary.md","nextSlug":"/lessons/typescript/refactor-carousel","prevSlug":"/lessons/typescript/refactor-adopted-pet-context"}},"__N_SSG":true}